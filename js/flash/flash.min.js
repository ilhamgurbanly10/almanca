// using-functions

flashPreventDefault();

flashBackToTop();

flashFontSizeChanger();

// the-end-of-using-functions



// functions



// flash-prevent-default

// !!! - to do that give links this class - .fl-link-disabled

function flashPreventDefault() {

	// elements-and-values
	var links = document.querySelectorAll('.fl-link-disabled');

	// avoiding-errors
	if(links[0] == undefined) return;

	// loop	
	for (var i = 0; i < links.length; i++) {

		links[i].onclick = function(event) { event.preventDefault(); }

	}	

}

// the-end-of-flash-prevent-default


// flash-is-scrolled

// !!! - Wenn element is scrolled, it gives to element class '.fl-is-scrolled'
// !!! - It works one time

function flashIsScrolled(el) {

	function addClass() {

		if (isInView(el)) {

			el.classList.add('fl-is-scrolled');
			window.removeEventListener('scroll', addClass);

		}	

	}	
	
	function isInView(el, percentageScroll = 100) {

	  const elementTop = el.getBoundingClientRect().top;

	  return (
	    elementTop <= 
	    ((window.innerHeight || document.documentElement.clientHeight) * (percentageScroll/100))
	  );

	}

	window.addEventListener('load', addClass);
	window.addEventListener('scroll', addClass);

}	

// the-end-of-flash-is-scrolled



// flash-back-to-top-button

function flashBackToTop() {

	// elements-and-values
	const btn = document.querySelector('.fl-back-to-top-btn');

	// avodiding-errors
	if (btn == undefined) return;

	// functions
	function show() { 

		if (document.documentElement.scrollTop > 700) btn.classList.add('fl-show');

		else hide();

	}

	function hide() { btn.classList.remove('fl-show'); }

	function toTop() { document.documentElement.scrollTop = 0; }

	// adding-functions
	btn.addEventListener('click', hide);
	btn.addEventListener('click', toTop);
	window.addEventListener('scroll', show);

}

// the-end-of-flash-back-to-top-button



// flash-font-size-changer

function flashFontSizeChanger() {

	// elements-and-values
	var containers = document.querySelectorAll('.fl-font-size-changer-con');

	// avoiding-errors
	if (containers[0] == undefined) return;

	var length = containers.length;
	var targets = [];
	var elements = [];
	var minusButtons = [];
	var plusButtons = [];
	var steps = 5;
	var nextIndexes = [];
	var prevIndexes = [];

	// for-loop
	for (var i = 0; i < length; i++) {

		minusButtons[i] = containers[i].querySelector('.fl-font-size-changer-minus');
		plusButtons[i] = containers[i].querySelector('.fl-font-size-changer-plus');

		minusButtons[i].setAttribute('index',''+i+'');
		plusButtons[i].setAttribute('index',''+i+'');

		targets[i] = containers[i].getAttribute('target');
		elements[i] = document.querySelector(''+targets[i]+'');

		minusButtons[i].addEventListener('click', minus);
		plusButtons[i].addEventListener('click', plus);
		elements[i].classList.add('ffsc-font-size-1');

		nextIndexes[i] = 1;

	}

	// functions

	function minus() {

		var y = this.getAttribute('index');

		changeClasses(y, prevIndexes[y]); 

	
		if (prevIndexes[y] == 0)  { 

			disableMinus(this); 
			nextIndexes[y] = 1; }

		else { 

			nextIndexes[y] = prevIndexes[y] + 1;
			prevIndexes[y] -= 1;

		}	

		enablePlus(plusButtons[y]);

	}

	function plus() {

		var y = this.getAttribute('index');

	    changeClasses(y, nextIndexes[y]);

		if (nextIndexes[y] == steps - 1) { 

			disablePlus(this); 
			prevIndexes[y] = steps - 2; 

		}

		else { 

			prevIndexes[y] = nextIndexes[y] - 1;
			nextIndexes[y] += 1;

		}	

		enableMinus(minusButtons[y]);

	}

	function disableMinus(btn) { btn.setAttribute('disabled', ''); }

	function enableMinus(btn) { btn.removeAttribute('disabled'); }

	function disablePlus(btn) { btn.setAttribute('disabled', ''); }

	function enablePlus(btn) { btn.removeAttribute('disabled'); }

	function changeClasses(x, loop) {

		switch (loop) {
		  case 0:
		    flashAddClassRemovingOthers(elements[x], "ffsc-font-size-1", 
		    	["ffsc-font-size-2", "ffsc-font-size-3", "ffsc-font-size-4", "ffsc-font-size-5"]);
		    break;
		  case 1:
		    flashAddClassRemovingOthers(elements[x], "ffsc-font-size-2", 
		    	["ffsc-font-size-1", "ffsc-font-size-3", "ffsc-font-size-4", "ffsc-font-size-5"]);
		    break;
		  case 2:
		    flashAddClassRemovingOthers(elements[x], "ffsc-font-size-3", 
		    	["ffsc-font-size-1", "ffsc-font-size-2", "ffsc-font-size-4", "ffsc-font-size-5"]);
		    break;
		  case 3:
		    flashAddClassRemovingOthers(elements[x], "ffsc-font-size-4", 
		    	["ffsc-font-size-1", "ffsc-font-size-2", "ffsc-font-size-3", "ffsc-font-size-5"]);
		    break;
		  case 4:
		    flashAddClassRemovingOthers(elements[x], "ffsc-font-size-5", 
		    	["ffsc-font-size-1", "ffsc-font-size-2", "ffsc-font-size-3", "ffsc-font-size-4"]);
		    break;
		}

	}

}

// the-end-of-flash-font-size-changer



// class-functions

function flashAddClassRemovingOthers(el, className, classes = []) {

	el.classList.add(''+className+'');

	for (var i = 0; i < classes.length; i++) {
	
			el.classList.remove(''+classes[i]+'');

	}

}

// the-end-of-class-functions



// characters

function flashGetCharactersLength(el, is_value, trim = false) {

	if (is_value) el = el.value;
	if (trim == true) el = el.trim();
	return el.length;

}

// the-end-of-characters



// flash-selector

function flashSelector(query, selectAll = false) {

	var el;

	if (typeof query == "string") {

		if (!selectAll) return el = document.querySelector(''+query+'');
		else return el = document.querySelectorAll(''+query+'');

	}
	
	return query;

}

// the-end-of-flash-selector



// flash-prevent-default

function flashPreventDefaultLinks(elements) {

	if (elements[0] == undefined) 
		element.addEventListener("click", function(event){
	  		event.preventDefault();
		});
	else {

		for (var i = 0; i < elements.length; i++) {

			elements[i].addEventListener("click", function(event){
	  			event.preventDefault();
			});

		}	

	}	

}

// the-end-of-flash-prevent-default



// flash-set-index

function flashSetIndexAsAttribute(elements) {

	for (var i = 0; i < elements.length; i++) {

		elements[i].setAttribute('index', ''+i+'');
	}

}

// the-end-of-flash-set-index



// flash-create-element

function flashCreateElement(tagName, html = "", attributes = {}, parent = false, childIndex = "last-child") {

	var el = document.createElement(''+tagName+'');
	el.innerHTML = html;

	for (x in attributes) {	el.setAttribute(''+x+'',''+attributes[x]+''); }

  	if (parent) {

  		if (childIndex == "last-child") parent.appendChild(el);
  		else if (childIndex == "first-child") parent.insertBefore(el, parent.childNodes[0]);
 		else parent.insertBefore(el, parent.children[childIndex]);
  	}

  	return el;

}

// the-end-of-flash-create-element



// flash-remove-class

function flashRemoveClass(element, className, exceptionalElement) {

	// using_functions
	if (element[0] == undefined) removeClassOfElement();
	else removeClassOfElements();

	// functions
	function removeClassOfElement() { element.classList.remove(''+className+''); }

	function removeClassOfElements() {

		for (var i = 0; i < element.length; i++) {

			element[i].classList.remove(''+className+'');

		}

		if (exceptionalElement != undefined) exceptionalElement.classList.add(''+className+'');
		
	}

}

function flashAddClassAndRemoveOthers(el, className, otherClassNames = []) {

	el = flashSelector(el);

	for (var i = 0; i < otherClassNames.length; i++) {
		
		if (otherClassNames[i] == className) continue;
		el.classList.remove(''+otherClassNames[i]+'');
	}

	el.classList.add(''+className+'');

}

function flashRemoveClasses(el, classNames = []) {

	el = flashSelector(el);

	for (var i = 0; i < classNames.length; i++) {
		
		el.classList.remove(''+classNames[i]+'');
	}

}

// the-end-of-flash-remove-class



// the-end-of-functions